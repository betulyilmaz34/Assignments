{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YioJdUgDvB_A"
      },
      "source": [
        "<h1 style=\"font-size: 2.5em; font-weight: bold; margin-top: 0.5em; margin-bottom: 0.5em;\">\n",
        "First steps into Python\n",
        "</h1>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YKmNcAmzvntI"
      },
      "source": [
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b>Preparing for this assignment:</b>\n",
        "\n",
        "The following resources will help you to get ready to complete this assignment. If you are comfortable programming Python, you can skip this.\n",
        "<ul>\n",
        "    <li>If you do not have experience programming in Python, here is a good tutorial to get you quickly on track: <a href=\"https://cogs18.github.io/intro.html\" target=\"_blank\">Introduction to Python</a> </li>\n",
        "    <li>If you already know other languages and need a technical view of what is special about Python syntax, try <a href=\"https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Indentation\" target=\"_blank\">this</a></li>\n",
        "</ul>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bYrPLyirvB_K"
      },
      "source": [
        "There are two ways to run Python: either on the cloud (using Google Colab) or locally on your computer using Notebook. Either way if you are reading this, you are probably set to go. Just in case:\n",
        "- To run code on **Google Colab**, you don't need to install anything on your machine since all the computations take place in the cloud.\n",
        "- To run **Python Notebooks** locally, you either need to install Python 3 using Anaconda following [these](https://jupyter.readthedocs.io/en/latest/install.html) instructions or else use [myapps.upf.edu](https://myapps.upf.edu). You will find more detailed instructions in the [course site](https://github.com/wimmerlab/MBC_data_analysis) in GitHub.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NMgb__W0vB_L"
      },
      "source": [
        "# Getting started\n",
        "## Importing libraries\n",
        "The actions you can do with Python code are limitless, so you do not need all the tools at the same time. If you loaded all Python tools at once you would be taking up all your computer resources! That is why Python works with **libraries**.  \n",
        "\n",
        "One library is a collection of functions that allows you to perform many actions.   \n",
        "In other words, they have snippets of code created and tested by other people that you can quickly reuse, so you do not need to work as much.\n",
        "\n",
        "Every time you start a new project, you will have to **import** the libraries you will use.  \n",
        "The ones we will need for this assignment are:\n",
        "\n",
        "[Numpy](https://en.wikipedia.org/wiki/NumPy) for manipulating numerical data.   \n",
        "[Matplotlib](https://en.wikipedia.org/wiki/Matplotlib) for plotting graphics.\n",
        "\n",
        "These are the default two libraries you will use on basicalle ALL your notebooks. Explore the links if you want to know more about them! :)\n",
        "\n",
        "Let's start importing!\n",
        "\n",
        "PS: remember to **execute** each of the cells with code below by clicking in the cell and press \"Shift + Enter\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:18.888712Z",
          "start_time": "2022-01-17T22:28:18.630790Z"
        },
        "id": "NA2nT_F-vB_O"
      },
      "outputs": [],
      "source": [
        "import numpy as np  # everytime we want to use a function from numpy, we will put np. before, e.g.: np.array()\n",
        "import matplotlib.pyplot as plt  # same for function from matplotlib.pyplot, we will address them with plt. , e.g.: plt.plot()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f8KChA8y-x6z"
      },
      "source": [
        "We imported these two libraries, and we gave them shorter names to simplify our code. From now on, we can use the code contained in the library **numpy** by prefixing it with `np.` (for instance `np.pi` will give us the numerical value of the number $\\pi$), and the code of the library **matplotlib.pyplot** with `plt` (for example: `plt.plot`)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "efSDOve8vB_P"
      },
      "source": [
        "Note that, in the first line of the code, there is some text after a `#`?   \n",
        "This is a **comment**. Comments are really useful if someone else has to read your code. In a Python Notebook comments can come either after `#` in *code cells* or directly in a *markdown cell* which is entirely text (see all cells before this first *code cell*)\n",
        "\n",
        "It will be much easier for other readers (and for you after some time) to understand your code if you comment your codes.\n",
        "**Do not be lazy and comment!**.  \n",
        "\n",
        "[Here](https://stackabuse.com/commenting-python-code/) you have some advice to do it wisely.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gk18S48qvB_R"
      },
      "source": [
        "## Loading the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4h_yjenXvB_S"
      },
      "source": [
        "When running data analyses, one of the first things to do is to load the data into our programming environment so we can manipulate it. Data will come in a specific format depending on how it was generated and saved. You will generally need to obtain this information from the person who generated the data.\n",
        "\n",
        "One common format you might get the data in is in a tabular format, with measurements organized in a fixed number of rows and columns (a *matrix*). Let's load one of these datasets.\n",
        "\n",
        "Now, you need to have the file: \"Task_Perceptual_simple.csv\" in the same directory as this file, or else know the exact path to this file. Below, we read the file from the online GitHub repository (using an URL). The line that is commented out shows how to read the file from a local directory.  \n",
        "  \n",
        "**One first question, what is in this file? (Hint: open it in a text editor or in GitHub)**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:28.542602Z",
          "start_time": "2022-01-17T22:28:28.519042Z"
        },
        "id": "p4QYIVfFvB_S"
      },
      "outputs": [],
      "source": [
        "#data = np.genfromtxt(\"Task_Perceptual_simple.csv\", delimiter=',', skip_header=1) #use the function genfromtxt from numpy to load the contents of the local file\n",
        "data = np.genfromtxt(\"https://raw.githubusercontent.com/wimmerlab/MBC_data_analysis/main/A0_PythonBasics/Task_Perceptual_simple.csv\", delimiter=',', skip_header=1) #load the file from github"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gtcmnyGzvB_S"
      },
      "source": [
        "If there are no errors.... congratulations! You have imported the data. Let's take a look!\n",
        "### Inspecting arrays"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:29.826144Z",
          "start_time": "2022-01-17T22:28:29.814946Z"
        },
        "id": "NHAhpYh7vB_T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61c5b4d6-dfcb-425d-93ba-5d5831e75959"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-10.      ,   0.      ,  -5.      ,  -5.2122  ,   1.      ],\n",
              "       [-10.      , -10.      , -10.      ,  -8.21768 ,   1.      ],\n",
              "       [ 20.      ,  10.      ,  15.      , -17.93416 ,   1.      ],\n",
              "       ...,\n",
              "       [ 10.      , -10.      ,   0.      ,  12.234593,  14.      ],\n",
              "       [  0.      ,  10.      ,   5.      ,   8.8409  ,  14.      ],\n",
              "       [-20.      ,   0.      , -10.      ,   9.943002,  14.      ]])"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FZxw7LyPvB_T"
      },
      "source": [
        "`data` is a matrix, how could you tell its dimensions (number of rows and colums)?\n",
        "(Note: if you edit your code in environments such as Spyder instead of Notebook, you will find tools to explore directly all the variables created in a session)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3TakLxKWvB_V"
      },
      "source": [
        "Don't worry if you don't know right away... A really important thing you will learn as you are coding is to do \"efficient\" Google searches and to ask ChatGPT for help.\n",
        "Everyone -- including your teachers when creating these templates -- have to search online from time to time when coding.  \n",
        "***Do not get stressed about it!***  \n",
        "At the beginning, it will take a long time to find simple stuff but as you keep coding, you will get used to\n",
        "the language and you will learn what are the keywords you need to use for every search.\n",
        "\n",
        "What if you start by searching: **\"dimensions numpy matrix\"** in Google or ask ChatGPT?\n",
        "\n",
        "Write the command that results from your search in the next cell:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:31.557408Z",
          "start_time": "2022-01-17T22:28:31.551090Z"
        },
        "id": "NTAMI1gkvB_V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1ae69fa6-7d4c-4815-cfe0-e80d05d9bf93"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(13503, 5)\n"
          ]
        }
      ],
      "source": [
        "print(data.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0f-NnGEgB6pR"
      },
      "source": [
        "Now let's see if you did it right. The first number should tell you the number of rows, while the second number should tell you the number of columns.\n",
        "\n",
        "Here is a little check that we can have our program do on our data using the command `assert`. This is useful to **debug** our code, when we want to check that things are as we want them to be in the process of developing the code. In our course, we will use this also to give you feedback as to whether you are generating reasonable code or if there is some error to correct. Try it now by replacing the placeholder `???` in the cell below with your answer for getting the matrix dimensions (cell above). Then execute the cell with *Shift + Enter*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:33.362398Z",
          "start_time": "2022-01-17T22:28:33.357673Z"
        },
        "id": "oxdMgVM7BuL8"
      },
      "outputs": [],
      "source": [
        "assert data.shape[0] == 13503"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s8zvDVUYC4iv"
      },
      "source": [
        "If you did not get any output back, then you are good. If you did get a warning, then your code has some problem."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cRDZF40KUF4e"
      },
      "source": [
        "Ok, so now is the good time to tell you about the data! This is the behavioral data from one experiment in an influential paper studying the **confirmation bias in perceptual decisions**, by Talluri and colleagues ([link here](https://www.sciencedirect.com/science/article/pii/S0960982218309825)). The paradigm is illustrated in this [figure](https://ars.els-cdn.com/content/image/1-s2.0-S0960982218309825-gr1_lrg.jpg):\n",
        "Each row of the array correspond to one trial in the dataset (the array concatenantes data from all participants). Each column represents a different variable in the task, respectively: the orientation of the first stimulus, the orientation of the second stimulus, the average orientation over both stimuli, the orientation provided by the subject at the end of the trial and the subject id. Note that the data here corresponds to the subset of trials where an intermediate judgment is provided and the subject was requested to provided the orientation at the end of the trial."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wQj_3D_5vB_V"
      },
      "source": [
        "## Subsetting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5JqPZPPPDFYU"
      },
      "source": [
        "A fundamental operation we will need to do on our data is to select parts of the data, some rows or some columns, to operate specifically on them. This selection of a subset of our data is what we call *subsetting*."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Rlwxp8WvB_V"
      },
      "source": [
        "Just to get used to it, ***extract the first 10 rows of the 1st and 2nd column*** of your array **data**.   \n",
        "Be careful, in Python the numbers start at 0, so the first row has the index 0.  \n",
        "You can google by yourself how to do it or use [this](https://jakevdp.github.io/PythonDataScienceHandbook/02.02-the-basics-of-numpy-arrays.html) online handbook.   \n",
        "Write the solution in the next cell.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:35.692122Z",
          "start_time": "2022-01-17T22:28:35.682108Z"
        },
        "id": "MiA52d7ZvB_W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d48ff5d-e44a-47ed-c7f6-008d4dca1ac5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-10.,   0.],\n",
              "       [-10., -10.],\n",
              "       [ 20.,  10.],\n",
              "       [-20.,  10.],\n",
              "       [ 20., -10.],\n",
              "       [-20.,   0.],\n",
              "       [-20., -20.],\n",
              "       [  0.,  10.],\n",
              "       [-20.,  10.],\n",
              "       [-10., -20.]])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "data[:10, :2]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pEMvi9xuvB_W"
      },
      "source": [
        "But, what are these numbers? Well, you will explore them in depth in the next assignments.   \n",
        "For now, we are just practicing basic skills, so it is enough to know that this is a psychophysics dataset of a perceptual decision making task where subjects have to estimate the average motion direction of two subsequent stimuli.   \n",
        "Each row is one ***trial***, the first column contains the motion direction of the first stimulus ***x1*** and the second column the motion direction of stimulus ***x2***.  \n",
        "Their units are degrees.\n",
        "***What is the range of these values?***  \n",
        "Hint: google for minimum and maximum values\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:36.667153Z",
          "start_time": "2022-01-17T22:28:36.660580Z"
        },
        "id": "rs5mqzvVvB_W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2fbab114-f422-40da-b59a-74d9dd551a9e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "min for x1: -20.0 max: 20.0\n",
            "min for x2: -20.0 max: 20.0\n"
          ]
        }
      ],
      "source": [
        "print(\"min for x1:\", data[:, 0].min(), \"max:\", data[:, 0].max())\n",
        "print(\"min for x2:\", data[:, 1].min(), \"max:\", data[:, 1].max())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ambmq6qSUF4f"
      },
      "source": [
        "The third column of the data is the average of x1 and x2, ***xavg***. Check is this is actually true by recomputing the avearage and comparing it to the third column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZVF7kd8KUF4f",
        "outputId": "aa736c75-9ce8-4f2d-ebf7-a0c64338927d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. ... 0. 0. 0.]\n",
            "<class 'numpy.float64'>\n"
          ]
        }
      ],
      "source": [
        "# create vector as average of first two columns\n",
        "xav= np.mean(data[:, 0:2], axis=1)\n",
        "diff= xav-data[:,2]\n",
        "print(diff)\n",
        "# maximum absolute difference (should be 0 IF AND ONLY IF all differences are zero) - NOTE: we could also use boolean arrays which are introduced below\n",
        "print(type(np.max(np.abs(diff))))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yuCnWIATvB_X"
      },
      "source": [
        "## Subsetting with booleans"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xzCi8nVUvB_X"
      },
      "source": [
        "Sometimes it is convenient to use [booleans]().\n",
        "This is typically just another Python array but, instead of containing numbers, it contains `True` and `False`. If you use a boolean to index another array you just get the values of this array that correspond to `True` values in the boolean.  \n",
        "For example:\n",
        "\n",
        "```\n",
        "matrix = np.array([1, 2, 3, 4])\n",
        "boolean = np.array([True, False, True, True])\n",
        "```\n",
        "\n",
        "If you apply the boolean to index the matrix this way\n",
        "```\n",
        "matrix[boolean]\n",
        "```\n",
        "you get a subset of the original array `matrix` only with corresponding `True` values in `boolean`:\n",
        "```\n",
        "array([1, 3, 4])\n",
        "```\n",
        "\n",
        "A boolean is something really simple to create, you just need to specify a [condition](https://www.w3schools.com/python/python_conditions.asp), for instance:\n",
        "\n",
        "```\n",
        "matrix = np.array([1, 1, 2, 2])\n",
        "boolean = matrix==2\n",
        "```\n",
        "(notice the difference between `=`, an assignment, and `==`, a condition)\n",
        "\n",
        "The boolean then will be:\n",
        "\n",
        "```\n",
        "array([False, False,  True,  True])\n",
        "```\n",
        "which indicates in what positions of array **matrix** the condition `==2` is satisfied"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W_qd39GivB_X"
      },
      "source": [
        "Let's now try this hands-on!\n",
        "\n",
        "The 5th column of the matrix contains an integer number that identifies each specific subject that participated in the study. Let's now create a few new [variables](https://realpython.com/python-variables/) :\n",
        "\n",
        "1.   Create the variable `nSubject` with the number of subjects that performed this task (Hint: Google **\"python unique\"**)\n",
        "2.   Create the boolean `bool7` to mark the rows obtained from Subject #7\n",
        "3.   Using `bool7` create the variable `subj7` that includes only the specific data of Subject #7\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:39.101299Z",
          "start_time": "2022-01-17T22:28:39.087732Z"
        },
        "id": "hfPeEFKTvB_X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0d4ec15-6cf5-4ec7-8c9a-9c889906707a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of subjects:  14\n"
          ]
        }
      ],
      "source": [
        "# list of all subject indices\n",
        "subject_list = np.unique(data[:, 4])\n",
        "\n",
        "# number of elements in that list (corresponds to the number of subjects)\n",
        "nSubject = len(subject_list)\n",
        "print(\"number of subjects: \", nSubject)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "id": "fiifyH1OUF4f"
      },
      "outputs": [],
      "source": [
        "# create boolean array that is true for rows corresponding to subject 7\n",
        "bool7 = data[:,4] == 7\n",
        "\n",
        "# select data for subject 7 (i.e corresponding rows)\n",
        "subj7 = data[bool7]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:40.053043Z",
          "start_time": "2022-01-17T22:28:40.044544Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xpu7PWmUUF4f",
        "outputId": "03458ca7-6415-4615-a1d1-3c05d6dadb4f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "subj7.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:40.854177Z",
          "start_time": "2022-01-17T22:28:40.844388Z"
        },
        "id": "KLRDlnxMEser"
      },
      "outputs": [],
      "source": [
        "assert nSubject == 14, \"nSubject is incorrect\"\n",
        "assert np.sum(bool7) == 1000\n",
        "assert np.shape(subj7)[0] == sum(bool7)\n",
        "assert np.shape(subj7)[1] == 5"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fikWivJPGpGX"
      },
      "source": [
        "If you ran the previous cell and it did not complain, you did a great job! If not, try running the different ```assert``` commands separately to debug more specifically your problem. **Remember that by preceding a whole sentence with a # you turn it into a comment and it is not executed as code!**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QyXVjvdCH7fi"
      },
      "source": [
        "By the way, what is ```np.sum(bool7)```?\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zIOYt5_1UF4f"
      },
      "source": [
        "<u>Answer</u>:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RHBuyA_JvB_X"
      },
      "source": [
        "# Functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3HeDtvLovB_Y"
      },
      "source": [
        "Sometimes, in the libraries that we are using we do not have the specific function that we need.  \n",
        "When that is the case, we have to create it by ourselves.  \n",
        "Suppose, for instance, that we want to calculate the distance between the stimulus average (the third column of our data) and the response of the participant (stored in the forth column of our data) to get a measure of error. Distances can often be calculated as a mere difference, but here we are dealing with angles on a circle so that we have to take into account that the circle wraps around. We need a specific function to deal with this.\n",
        "The function will be called ***circdist***.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:43.825927Z",
          "start_time": "2022-01-17T22:28:43.820702Z"
        },
        "id": "1FBwZTEEvB_Z"
      },
      "outputs": [],
      "source": [
        "def circdist(angles1, angles2): # define the name and set the arguments between parentheses\n",
        "    \"\"\"\n",
        "    Calculate the circular distance between two angles.\n",
        "\n",
        "    Parameters:\n",
        "        angles1 (float): First angle. Scalar or array.\n",
        "        angles2 (float): First angle. Scalar or array.\n",
        "\n",
        "    Returns:\n",
        "        float: Angle difference(s).\n",
        "    \"\"\"\n",
        "    angle_diff = angles1 - angles2 # angle difference\n",
        "    angle_diff = angle_diff  / 180 * np.pi # convert to radian\n",
        "    output = np.angle(np.exp(1j * angle_diff))  # mathematical operation to get the circular distance\n",
        "    output = output / np.pi * 180   # convert back to degrees\n",
        "    return output  # return the circular distance in radians"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DsmyFLvLvB_Z"
      },
      "source": [
        "In this case, the operation we are performing in the function is quite complex but the structure of the code is very simple. Check it up carefully: the command **def**, the name of the function with arguments within parenthesis, the colon at the end of the line, the indentation for all commands that define the function and finally the **return** command with the result that the function returns. You can learn [here](https://www.tutorialspoint.com/python/python_functions.htm) more about functions in Python.\n",
        "\n",
        "**Now use the circdist function to get the circular distance between the stimulus average and the response of the subject**. We will call this **error** as participants were supposed to respond the exact value of the target so any deviation from target is an \"error\".\n",
        "Hint: use the link above and apply the \"calling a function\" to this specific case."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_dFEGsLUF4j",
        "outputId": "171fdc60-29e7-4a46-cc86-0ca7bcbb303b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.2122000000000002\n"
          ]
        }
      ],
      "source": [
        "# distance between stimulus average and response for the first trial\n",
        "error_first_trial= circdist(data[0,2], data[0,3])\n",
        "print(error_first_trial)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:44.715661Z",
          "start_time": "2022-01-17T22:28:44.694283Z"
        },
        "id": "naypCp2DvB_a"
      },
      "outputs": [],
      "source": [
        "# array representing the distance between stimulus average and response for all trials\n",
        "error_first_trial = circdist(data[:,2], data[:,3])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LyxsN_yIvB_a"
      },
      "source": [
        "The circular distance between the target and the response (error) could be a really useful measure to add to our matrix, right? That way we do not need to calculate it everytime.  \n",
        "\n",
        "**Now try to add it as an extra column to the matrix**  *data* using the command `np.column_stack`.\n",
        "You already have the tools to start flying alone (copilot, chatgpt, google, matrix subsetting, intuition...)!   \n",
        "Do not be afraid! Try things!  \n",
        "Let the \"I am going to mess it up fear\" go away! If, by any weird chance, you \"destroy\" your matrix, you just have to go to the top of this page and run everyting again, it will just take 1 second! Try it now."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:46.531503Z",
          "start_time": "2022-01-17T22:28:46.525933Z"
        },
        "id": "7fyFSs88vB_b"
      },
      "outputs": [],
      "source": [
        "#insert your code here\n",
        "data = np.column_stack((data, error_first_trial))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:47.196004Z",
          "start_time": "2022-01-17T22:28:47.190695Z"
        },
        "id": "iLbTrFi7KXgX"
      },
      "outputs": [],
      "source": [
        "assert data.shape[1] == 6"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1PROUGyuvB_b"
      },
      "source": [
        "Great! Now you have one more column in your data array, which contains the angular error of responses in each trial. This is the last column of your array, and you can address that with the index \"-1\" in Python, so now `data[:,-1]` contains the values in **error**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Okm4wLQdvB_b"
      },
      "source": [
        "# Plotting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EeIatp-BvB_b"
      },
      "source": [
        "Let's see how the errors look like!  \n",
        "According to the literature they should follow a [Gaussian](https://en.wikipedia.org/wiki/Normal_distribution) distribution around 0.  \n",
        "The visualization tool that best fits what we need is a [histogram](https://en.wikipedia.org/wiki/Histogram).  \n",
        "Use matplotlib to plot a [histogram](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.hist.html) of the new column of your matrix.\n",
        "It would be nice if you could also plot a red vertical line at the mean value of errors and see if the results are in line with the assumption.  \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:28:50.223890Z",
          "start_time": "2022-01-17T22:28:49.943220Z"
        },
        "id": "dXzDQOelvB_b",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "9f5de569-0a32-484c-cf98-48aaae13ea4a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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A10OgHbM9utZIuuOqnTRv0uSUmY+qyNhEd+xxrfjmid0Jq31/h3U1zwBAAAEG8ITAACABcITAACABcITAACABcITAACABcITAACAhaC+zxMAtHe2tyYAEPyYeQIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALBAeAIAALDQJdAFAADazsDZ65q1fTQ/IwCVAO0XM08AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWuMM4APjJie7eDaDjYeYJAADAAuEJAADAAuEJAADAAuEJAADAAuEJAADAAuEJAADAAuEJAADAAuEJAADAAuEJAADAgnV4uvTSS1VVVdWs3ev16tJLL/VHTQAAAEHLOjy9/vrrqqura9Z+9OhR/c///I9figIAAAhWLf5uu3feecf5edeuXSovL3ceNzY2Kj8/X/369fNvdQAAAEGmxeFp+PDhcrlccrlcJzw9FxkZqaVLl/q1OAAAgGDT4vC0d+9eGWN06qmnauvWrerbt6/TFxYWptjYWIWGhrZKkQAAAMGixeFpwIABkqSmpqZWKwYAACDYtTg8fd2ePXu0YcMGVVZWNgtTubm5fikMAAAgGFl/2u5Pf/qTUlJSlJubq2effVbPPfecs6xZs8bvBX7yySf65S9/qd69eysyMlJnnHGG3nzzTaffGKPc3FwlJCQoMjJSaWlp2rNnj882Dhw4oMzMTLndbsXExGjKlCk6dOiQ32sFAAAdn/XM091336177rlHt956a2vU4+PgwYM677zzdMkll+jll19W3759tWfPHvXs2dMZs3DhQi1ZskRPPPGEkpOTNXfuXKWnp2vXrl2KiIiQJGVmZmr//v1av3696uvrde2112ratGl68sknW30fAABAx2Idng4ePKgrrriiNWppZsGCBUpKStKKFSuctuTkZOdnY4wWL16s2267TRMmTJAkrVq1SnFxcVqzZo0mT56s0tJS5efna9u2bRo1apQkaenSpRo/frzuv/9+JSYmtsm+AACAjsH6tN0V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jqhF4WnevHmSpMbGRl1yySU688wzFRMT05p1AQAABCWra55CQ0M1ZswYHTx4sLXqAQAACGrWF4wPHTpU//rXv1qjFgAAgKBnHZ7uvvtu3XzzzVq7dq32798vr9frswAAAHRk1vd5Gj9+vCTpJz/5ic+n7owxcrlcamxs9F91AAAAQcY6PG3YsKE16gAAAGgXrMNTcnKykpKSmt3ryRjDFwMDAIAOz/qap+TkZH322WfN2g8cOKDk5GS/FAUAABCsrMPTsWubjnfo0CFFRET4pSgAAIBg1eLTdjk5OZIkl8uluXPnKioqyulrbGxUcXGxhg8f7vcCAQAAgkmLw9P27dslfTXz9O677yosLMzpCwsL07Bhw3TzzTf7v0IAAIAg0uLwdOxTdtdee60efPBBud3uVisKAAAgWFl/2m7FihWtUQcAIEgMnL2uWdtH8zMCUAkQnKwvGAcAAOjMrGeeAKAzOtFsDIDOiZknAAAAC4QnAAAAC+0qPM2fP18ul0szZsxw2o4eParp06erd+/e6t69uyZNmqSKigqf9crKypSRkaGoqCjFxsZq1qxZamhoaOPqAQBAR9BuwtO2bdv0yCOP6Mwzz/Rpnzlzpl588UU988wzKiws1Keffqqf/exnTn9jY6MyMjJUV1enzZs364knntDKlSuVm5vb1rsAAAA6gHYRng4dOqTMzEz96U9/Us+ePZ326upqPfbYY3rggQd06aWXauTIkVqxYoU2b96sLVu2SJJeffVV7dq1S3/96181fPhwjRs3TnfddZeWLVumurq6QO0SAABop9pFeJo+fboyMjKUlpbm015SUqL6+nqf9tNOO039+/dXUVGRJKmoqEhnnHGG4uLinDHp6enyer3auXPnCZ+vtrZWXq/XZwEAAJDawa0KnnrqKb311lvatm1bs77y8nKFhYUpJibGpz0uLk7l5eXOmK8Hp2P9x/pOJC8vT3fccYcfqgcAAB1NUM887du3T7/73e+0evVqRUREtNnzzpkzR9XV1c6yb9++NntuAAAQ3II6PJWUlKiyslJnnXWWunTpoi5duqiwsFBLlixRly5dFBcXp7q6OlVVVfmsV1FRofj4eElSfHx8s0/fHXt8bMzxwsPD5Xa7fRYAAAApyMPTZZddpnfffVc7duxwllGjRikzM9P5uWvXriooKHDW2b17t8rKyuTxeCRJHo9H7777riorK50x69evl9vt1pAhQ9p8nwAAQPsW1Nc89ejRQ0OHDvVp69atm3r37u20T5kyRTk5OerVq5fcbrduuOEGeTwenXPOOZKkMWPGaMiQIbr66qu1cOFClZeX67bbbtP06dMVHh7e5vsEAADat6AOTy2xaNEihYSEaNKkSaqtrVV6eroeeughpz80NFRr167VddddJ4/Ho27duikrK0t33nlnAKsGAADtVbsLT6+//rrP44iICC1btkzLli37xnUGDBigl156qZUrAwAAnUFQX/MEAAAQbAhPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFghPAAAAFtrdFwMDANrewNnrfB5/ND8jQJUAgcfMEwAAgAXCEwAAgAVO2wHACRx/mgoAjmHmCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwALhCQAAwEKXQBcAAGh/Bs5e16zto/kZAagEaHvMPAEAAFggPAEAAFggPAEAAFggPAEAAFggPAEAAFggPAEAAFggPAEAAFjgPk8AOr0T3bMIAL4JM08AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAWCE8AAAAW+HoWAIBfHP81Nx/NzwhQJUDrYuYJAADAAuEJAADAAuEJAADAQlCHp7y8PJ199tnq0aOHYmNjNXHiRO3evdtnzNGjRzV9+nT17t1b3bt316RJk1RRUeEzpqysTBkZGYqKilJsbKxmzZqlhoaGttwVAADQQQR1eCosLNT06dO1ZcsWrV+/XvX19RozZoxqamqcMTNnztSLL76oZ555RoWFhfr000/1s5/9zOlvbGxURkaG6urqtHnzZj3xxBNauXKlcnNzA7FLAACgnQvqT9vl5+f7PF65cqViY2NVUlKiCy+8UNXV1Xrsscf05JNP6tJLL5UkrVixQikpKdqyZYvOOeccvfrqq9q1a5f++7//W3FxcRo+fLjuuusu3Xrrrbr99tsVFhbW7Hlra2tVW1vrPPZ6va27owAA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efHFF40xxtTX15s+ffqYVatWOWOuuuoqc+WVV/rU+rvf/c4YY8z7779vJJlNmzY5/Z9//rmJjIw0f//7333q2rFjx7f+Do6vxRhjJJnnnnvuhOOPHj1qoqKizObNm33ap0yZYq666ipjjDEbNmwwksyaNWt8xlx00UVmxIgRPm2///3vzeDBg32OwbJly0z37t1NY2PjN64HwH+YeQJg5ZxzzpHL5XIeezwe7dmzR42NjXr33XfV2NioH/3oR+revbuzFBYW6sMPP3TWiYqK0g9+8APncUJCgiorK53HFRUVmjp1qgYNGqTo6Gi53W4dOnRIZWVlkqQuXbro5z//uVavXi1Jqqmp0fPPP6/MzMwT1lxaWqouXbooNTXVaevdu7cGDx6s0tJSpy0sLMyZ8WlpLd/lgw8+0OHDh/XjH//Y53eyatUqn9+JJI0aNarZ+iNHjmy2Lx6Px+cYnHfeeTp06JD+93//9xvXA+A/fNoOgN8cOnRIoaGhKikpUWhoqE9f9+7dnZ+P/xScy+XyuW4qKytLX3zxhR588EENGDBA4eHh8ng8Phc+Z2Zm6qKLLlJlZaXWr1+vyMhIjR079nvVHxkZ6RNKWlrLtzl2anHdunXq16+fT194eLjP427dujVb/0RtLXGy6wH4boQnAFaKi4t9Hh+7Dig0NFQjRoxQY2OjKisrdcEFF5z0c2zatEkPPfSQxo8fL0nat2+fPv/8c58x5557rpKSkvT000/r5Zdf1hVXXPGNtyZISUlRQ0ODiouLde6550qSvvjiC+3evVtDhgz53rV8m69ffH7RRRe1eL1vkpKSon/84x8yxjhBb9OmTerRo4dOOeWU7719AN+N8ATASllZmXJycvSb3/xGb731lpYuXao//OEPkqQf/ehHyszM1DXXXKM//OEPGjFihD777DMVFBTozDPPVEZGRoueY9CgQfrLX/6iUaNGyev1atasWYqMjGw27he/+IWWL1+u999/Xxs2bPjW7U2YMEFTp07VI488oh49emj27Nnq16+fJkyY4JdavkmPHj108803a+bMmWpqatL555+v6upqbdq0SW63W1lZWS3eliRdf/31Wrx4sW644QZlZ2dr9+7dmjdvnnJychQSwpUYQFvgLw2AlWuuuUZHjhzR6NGjNX36dP3ud7/TtGnTnP4VK1bommuu0U033aTBgwdr4sSJ2rZtm/r379/i53jsscd08OBBnXXWWbr66qt14403KjY2ttm4zMxM7dq1S/369dN55533rdtcsWKFRo4cqX/7t3+Tx+ORMUYvvfTSd95Is6W1fJu77rpLc+fOVV5enlJSUjR27FitW7dOycnJVtuRpH79+umll17S1q1bNWzYMP32t7/VlClTdNttt1lvC8DJcZmvX2gAAACAb8XMEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgAXCEwAAgIX/A0I6nM9gGto/AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# plot histogram with 100 bin counts\n",
        "error_col=data[:,-1]\n",
        "plt.hist(error_col, bins=100);\n",
        "\n",
        "# add a red vertical line at the mean error (null error)\n",
        "mean_error = np.mean(data[:,-1])\n",
        "plt.axvline(mean_error, color='red');\n",
        "\n",
        "# add axis labels\n",
        "plt.xlabel('behavioral error');\n",
        "plt.ylabel('trial count');"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FSE3w4qZvB_b"
      },
      "source": [
        "# For loop"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DttBppekvB_c"
      },
      "source": [
        "Now you will learn a really powerful tool: the ***for loop***.   \n",
        "This tool allows you to make iterations, so you can run the same commands, over and over again without\n",
        "having to write new code for each iteration.  \n",
        "\n",
        "Check out the next two cells to understand why this is so useful:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:29:10.998292Z",
          "start_time": "2022-01-17T22:29:10.989789Z"
        },
        "id": "zCLZsWkfvB_d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8511a1e5-b621-446a-ac43-47411e26132f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "orange\n",
            "apple\n",
            "banana\n",
            "tomato\n",
            "lime\n",
            "lemon\n"
          ]
        }
      ],
      "source": [
        "# print all the values in a list without using a for loop\n",
        "fruits=['orange', 'apple', 'banana', 'tomato', 'lime', 'lemon']\n",
        "print(fruits[0])\n",
        "print(fruits[1])\n",
        "print(fruits[2])\n",
        "print(fruits[3])\n",
        "print(fruits[4])\n",
        "print(fruits[5])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:29:11.918130Z",
          "start_time": "2022-01-17T22:29:11.911799Z"
        },
        "id": "9eX6eSnGvB_d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d9c4400b-51f3-42fe-89e3-a7fb2e576d8d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "orange\n",
            "apple\n",
            "banana\n",
            "tomato\n",
            "lime\n",
            "lemon\n"
          ]
        }
      ],
      "source": [
        "# print all the values in a list using a for loop\n",
        "for f in fruits:\n",
        "    print(f)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-BjPdVHzvB_f"
      },
      "source": [
        "You can easily see that **the second cell is a much more efficient way to code**. It is not only shorter, but it is less error-prone. Errors in the code (**bugs**) are the worst nightmare of a data analyst. Again, note the **indentation** of the line containing `print(f)`. Try removing the indenting spaces. Can you then run that cell?\n",
        "\n",
        "In this case one only needs to write 6 lines of code for the first cell to get all the fruits, but what if we had 1,000 fruits?... Then we would have had to write 1,000 lines!.\n",
        "On the other hand, in the second cell we just needed two lines of code, both for 6 and 1,000 fruits.\n",
        "Everytime you see yourself repeating the same code just to change a small detail, remember you can use [for loops](https://www.w3schools.com/python/python_for_loops.asp)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VfdtkB30vB_f"
      },
      "source": [
        "Let's use the foor loop in our dataset!\n",
        "***Make the error histogram for each subject***  \n",
        "\n",
        "Hint 1: Take advantage of the code you used before to get the data of Subject #7, and now generalize to all other subjects.  \n",
        "\n",
        "Hint 2: To iterate through subjects you need to get the list of indexes for the subjects. To get that list you can use [`np.unique()`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html) if you are not sure about how many subjects there are, or else use [`np.arange()`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html) to get a range of values. Now you are ready to start your for loop.\n",
        "\n",
        "Hint 3: write: `plt.figure()` at the beginning of every iteration so you generate one histogram for each subject.\n",
        "\n",
        "Hint 4: Remember to enter 4 indenting spaces in front of the commands within the for loop!\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:29:20.328831Z",
          "start_time": "2022-01-17T22:29:19.476080Z"
        },
        "id": "ndyDfBR2vB_f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "528e8b93-1e93-4109-acd5-bdbe525c50a8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x1600 with 15 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# create plot with one subplot per subject\n",
        "nColumns = 3\n",
        "nRows = int(np.ceil(nSubject/nColumns))\n",
        "fig, ax = plt.subplots(nRows, nColumns, figsize=(14, 16))\n",
        "\n",
        "# loop through subjects\n",
        "for sb in np.unique(data[:,4]):\n",
        "\n",
        "    # define boolean array that is true for rows corresponding to this subject\n",
        "    trials = data[:,4] == sb\n",
        "    subj_data = data[trials]\n",
        "\n",
        "\n",
        "    # subplot counter (integer starting at 0, could also be done better using enumerate)\n",
        "    i = int(sb-1)\n",
        "    iCol = i % nColumns # corresponding column\n",
        "    iRow = i// nColumns # corresponding row\n",
        "\n",
        "    # add histogram for this subject\n",
        "    ax[iRow,iCol].hist(data[trials, -1], bins=100);\n",
        "\n",
        "    # add vertical line\n",
        "    mean_error = np.mean(data[:,-1]) # mean error for this subject\n",
        "    ax[iRow,iCol].axvline(mean_error, color='red');\n",
        "\n",
        "    # add label and title\n",
        "    ax[iRow,iCol].set_xlim((-100,100))\n",
        "    ax[iRow,iCol].set_ylabel('trial count')\n",
        "    ax[iRow,iCol].set_title(f'Subject: {int(sb)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "phqVma93MnvJ"
      },
      "source": [
        "# Panda DataFrames"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rwI2fbUxMria"
      },
      "source": [
        "**You** are now ready to do manipulations and graphical representations on your data, using the basic features of the **numpy** and **matplotplib** packages.\n",
        "\n",
        "However, in modern data analyses with Python it is common to use another library to organize better the data and provide more robust and intuitive subsetting and manipulation of the data. This is the [pandas](https://pandas.pydata.org/docs/getting_started/index.html#getting-started) library, and it introduces the concept of **DataFrame**.\n",
        "\n",
        "Dataframes also organize the data in rows and columns, but they naturally index them with names, rather than index numbers. Each row will generally correspond to one observation (here, on trial), and each column corresponds to one variable (stimulus, response, subject identity, etc.). This way, we can write our code referring to column `'error'` instead of column `5` and this makes debugging much easier. In addition, they come equipped with many in-built functions for compact data manipulation that make it a very powerful tool - we will only scratch the surfance of all the possibilities offered by dataframes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2dfK4elXOzFb"
      },
      "source": [
        "So, to start using Pandas, we need to import the library:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:30:04.596385Z",
          "start_time": "2022-01-17T22:30:04.277586Z"
        },
        "id": "ErTN1TOcvB_f"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E5UnVvYtO6Sa"
      },
      "source": [
        "and now we need to build our DataFrame. Since we already have a matrix with our data, we can just generate the DataFrame from this matrix by specifying the names of each column:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:30:12.909131Z",
          "start_time": "2022-01-17T22:30:12.901490Z"
        },
        "id": "61r0lvudO4UW"
      },
      "outputs": [],
      "source": [
        "df = pd.DataFrame(data, columns=['x1', 'x2', 'xavg', 'estim', 'subject', 'error'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rWoaOryOPw3a"
      },
      "source": [
        "Note that we could also directly load the data in a DataFrame from a CSV file, using the command below.\n",
        "The benefits of importing directly is that we also direct get the columns names from the CSV, we do have to specify them.\n",
        "(Of course we would also need to add the Error column)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "sUOkOL35UF4k"
      },
      "outputs": [],
      "source": [
        "#df = pd.read_csv(\"Task_Perceptual_simple.csv\",sep=',')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LLJAz8LcUF4k"
      },
      "source": [
        "You can now see the first rows of this dataframe using the command `head`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:30:19.498145Z",
          "start_time": "2022-01-17T22:30:19.473335Z"
        },
        "id": "HtGLWR4gP1GQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "6f1f1eba-4611-4af7-c4f5-205ac5ff68b7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     x1    x2  xavg     estim  subject     error\n",
              "0 -10.0   0.0  -5.0  -5.21220      1.0   0.21220\n",
              "1 -10.0 -10.0 -10.0  -8.21768      1.0  -1.78232\n",
              "2  20.0  10.0  15.0 -17.93416      1.0  32.93416\n",
              "3 -20.0  10.0  -5.0 -13.42634      1.0   8.42634\n",
              "4  20.0 -10.0   5.0   9.88556      1.0  -4.88556"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4cdd91fd-c8d4-4c01-9dbd-5dbc68aab3ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>xavg</th>\n",
              "      <th>estim</th>\n",
              "      <th>subject</th>\n",
              "      <th>error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>-5.21220</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.21220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-10.0</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>-8.21768</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.78232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>-17.93416</td>\n",
              "      <td>1.0</td>\n",
              "      <td>32.93416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-20.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>-13.42634</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.42634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.0</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.88556</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-4.88556</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cdd91fd-c8d4-4c01-9dbd-5dbc68aab3ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4cdd91fd-c8d4-4c01-9dbd-5dbc68aab3ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4cdd91fd-c8d4-4c01-9dbd-5dbc68aab3ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b0b3ea39-2061-47d5-81c3-7847284d3e2c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0b3ea39-2061-47d5-81c3-7847284d3e2c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b0b3ea39-2061-47d5-81c3-7847284d3e2c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 13503,\n  \"fields\": [\n    {\n      \"column\": \"x1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.49982093218257,\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          20.0,\n          10.0,\n          -20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.435365561485417,\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -10.0,\n          20.0,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xavg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.330259982732303,\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.0,\n          -10.0,\n          -15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"estim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.58371657984884,\n        \"min\": -75.1737,\n        \"max\": 110.697,\n        \"num_unique_values\": 13176,\n        \"samples\": [\n          -24.85055,\n          -1.72059999999999,\n          19.760278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subject\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.063130533995845,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          10.0,\n          12.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.69566624712254,\n        \"min\": -130.697,\n        \"max\": 90.1737,\n        \"num_unique_values\": 13290,\n        \"samples\": [\n          -6.94314,\n          0.25200000000000067,\n          -19.952\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 83
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ATG2psFjQ9kk"
      },
      "source": [
        "# Notice that now we use our dataframe as if it were a \"library\" from which we call functions: `df.fun` means that we apply built-in panda function `fun` to the dataframe `df`. There are tons of functions defined for Pandas dataframes and this is the extraordinary power of this library."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KeT8ratzP3bs"
      },
      "source": [
        "Now, instead of getting error values with `data[:,-1]`, we can use `df['error']`. This is a significant change because our code may add columns inadvertently and then `data[:,-1]` may be addressing something different than \"error\" but `df['error']` is clearly always getting back what we want. In this sense, our code will be clearer and have fewer bugs. Convince yourself that `data[:,-1]` and `df['error']` now give the same list of values:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:30:57.694108Z",
          "start_time": "2022-01-17T22:30:57.665610Z"
        },
        "id": "7XfvVnK0QJUC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd43a12f-8805-4b64-f842-7c96e84160eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "errors_data = data[:,-1]\n",
        "errors_df = df['error']\n",
        "\n",
        "print(np.allclose(errors_data, errors_df))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2022-01-17T22:31:01.023764Z",
          "start_time": "2022-01-17T22:31:01.015403Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98B6iq-CUF4k",
        "outputId": "4ecbe992-bace-4d3e-f4ad-b1c8b12443cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "errors_data = data[:,-1]\n",
        "errors_df = df['error']\n",
        "\n",
        "print(np.allclose(errors_data, errors_df))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m3Yw6KrWQKhG"
      },
      "source": [
        "As an exercise: **add now one extra column to the dataframe df that contains the circular distance between the columns x1 and x2**. This is much easier than with `column_stack` in plain **numpy**, you just need to assign the new values to a new column name (for instance `df['dist_x1x2']`) Check with `df.head()` that you can see this new column in your table."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "id": "o58puJs6Qi5B",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "5a304a23-62c4-4f2f-ba77-55d8922dc217"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     x1    x2  xavg     estim  subject     error  dist_x1x2\n",
              "0 -10.0   0.0  -5.0  -5.21220      1.0   0.21220      -10.0\n",
              "1 -10.0 -10.0 -10.0  -8.21768      1.0  -1.78232        0.0\n",
              "2  20.0  10.0  15.0 -17.93416      1.0  32.93416       10.0\n",
              "3 -20.0  10.0  -5.0 -13.42634      1.0   8.42634      -30.0\n",
              "4  20.0 -10.0   5.0   9.88556      1.0  -4.88556       30.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5f05816-ec41-4999-ab1a-8b6eae71dba8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>xavg</th>\n",
              "      <th>estim</th>\n",
              "      <th>subject</th>\n",
              "      <th>error</th>\n",
              "      <th>dist_x1x2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>-5.21220</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.21220</td>\n",
              "      <td>-10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-10.0</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>-8.21768</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.78232</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>-17.93416</td>\n",
              "      <td>1.0</td>\n",
              "      <td>32.93416</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-20.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>-13.42634</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.42634</td>\n",
              "      <td>-30.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.0</td>\n",
              "      <td>-10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.88556</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-4.88556</td>\n",
              "      <td>30.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5f05816-ec41-4999-ab1a-8b6eae71dba8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e5f05816-ec41-4999-ab1a-8b6eae71dba8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e5f05816-ec41-4999-ab1a-8b6eae71dba8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-62609ca6-790b-40c2-bbaf-402939ea1f62\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62609ca6-790b-40c2-bbaf-402939ea1f62')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-62609ca6-790b-40c2-bbaf-402939ea1f62 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 13503,\n  \"fields\": [\n    {\n      \"column\": \"x1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.49982093218257,\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          20.0,\n          10.0,\n          -20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.435365561485417,\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -10.0,\n          20.0,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xavg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.330259982732303,\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.0,\n          -10.0,\n          -15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"estim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.58371657984884,\n        \"min\": -75.1737,\n        \"max\": 110.697,\n        \"num_unique_values\": 13176,\n        \"samples\": [\n          -24.85055,\n          -1.72059999999999,\n          19.760278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subject\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.063130533995845,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          10.0,\n          12.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.69566624712254,\n        \"min\": -130.697,\n        \"max\": 90.1737,\n        \"num_unique_values\": 13290,\n        \"samples\": [\n          -6.94314,\n          0.25200000000000067,\n          -19.952\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dist_x1x2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.28153178106932,\n        \"min\": -30.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -10.0,\n          0.0,\n          -20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 86
        }
      ],
      "source": [
        "df['dist_x1x2'] = circdist(df['x1'], df['x2'])\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FstPqTDGUF4k"
      },
      "source": [
        "Well done! Now compare the simplicity of adding one column to a dataframe to the more cumbersome way to append a column to a numpy array as we did above using `np.column_stack`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TbJLoq4yQxfY"
      },
      "source": [
        "Now check this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "rL5_0P5TQymx",
        "outputId": "f56bde1c-99a0-413e-a04b-1ab9984ce731"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df.hist(column='error', by='subject');"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Sd14xUnR-HW"
      },
      "source": [
        "**Neat, eh?** Compare what you had to do with bare **numpy** above!! You can unpack this very compact command [here](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.hist.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_86M9on3UF4k"
      },
      "source": [
        "*It* is thus general good practice to organize our datasets in Python using the Pandas library. It not only keeps the code more readable, and prevents many errors, but it also provides very compact functions to deal with data manipulation and plotting. See for instance how you would compute the mean and standard deviation of behavioral errors for each subject:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "gWMz_FMMUF4k",
        "outputId": "5eafb337-f78a-46c6-ab13-db528d6cc989"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              mean        std\n",
              "subject                      \n",
              "1.0       2.747008  10.382429\n",
              "2.0      -3.257358  28.016835\n",
              "3.0       1.657591  13.202259\n",
              "4.0      -0.944210  15.360401\n",
              "5.0       0.215563  13.307636\n",
              "6.0       2.835802  15.429018\n",
              "7.0      -2.230346   8.501350\n",
              "8.0       2.851999  10.771592\n",
              "9.0      -0.851512   7.155847\n",
              "10.0    -11.453458  20.579347\n",
              "11.0      1.556309   8.873257\n",
              "12.0      0.943741   9.838508\n",
              "13.0      1.797562   9.555759\n",
              "14.0     -4.695254  14.566496"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3cfc03e7-ec06-4c13-972a-5a80480c75c1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>2.747008</td>\n",
              "      <td>10.382429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.0</th>\n",
              "      <td>-3.257358</td>\n",
              "      <td>28.016835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.0</th>\n",
              "      <td>1.657591</td>\n",
              "      <td>13.202259</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.0</th>\n",
              "      <td>-0.944210</td>\n",
              "      <td>15.360401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.0</th>\n",
              "      <td>0.215563</td>\n",
              "      <td>13.307636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6.0</th>\n",
              "      <td>2.835802</td>\n",
              "      <td>15.429018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7.0</th>\n",
              "      <td>-2.230346</td>\n",
              "      <td>8.501350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8.0</th>\n",
              "      <td>2.851999</td>\n",
              "      <td>10.771592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9.0</th>\n",
              "      <td>-0.851512</td>\n",
              "      <td>7.155847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10.0</th>\n",
              "      <td>-11.453458</td>\n",
              "      <td>20.579347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11.0</th>\n",
              "      <td>1.556309</td>\n",
              "      <td>8.873257</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12.0</th>\n",
              "      <td>0.943741</td>\n",
              "      <td>9.838508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13.0</th>\n",
              "      <td>1.797562</td>\n",
              "      <td>9.555759</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14.0</th>\n",
              "      <td>-4.695254</td>\n",
              "      <td>14.566496</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cfc03e7-ec06-4c13-972a-5a80480c75c1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3cfc03e7-ec06-4c13-972a-5a80480c75c1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3cfc03e7-ec06-4c13-972a-5a80480c75c1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2db223f9-d856-4b8e-a29f-16cfe2a95bc7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2db223f9-d856-4b8e-a29f-16cfe2a95bc7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2db223f9-d856-4b8e-a29f-16cfe2a95bc7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"subject\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.183300132670378,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          10.0,\n          12.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.901907185888265,\n        \"min\": -11.4534578201559,\n        \"max\": 2.8519987308254966,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          -11.4534578201559,\n          0.943741144542772,\n          2.7470081124362893\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.555418180324484,\n        \"min\": 7.155847458617579,\n        \"max\": 28.01683509414096,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          20.579347153078267,\n          9.838508465894416,\n          10.382428578922857\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 88
        }
      ],
      "source": [
        "df.groupby('subject').error.agg(('mean', 'std'))"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Assignment 0.ipynb",
      "provenance": []
    },
    "hide_input": false,
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.8"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}